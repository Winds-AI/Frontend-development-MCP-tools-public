---
alwaysApply: true
---
## Frontend Development MCP Ecosystem — Overview and How It Works

This workspace provides a complete loop for AI-assisted frontend work across multiple projects using an MCP server, a browser tools server, and a Chrome extension.

### Components
- MCP server: [mcp-server.ts](mdc:browser-tools-mcp/mcp-server.ts)
- Browser tools server: [browser-connector.ts](mdc:browser-tools-server/browser-connector.ts)
- Server modules (selected):
  - Project config/env: [shared.ts](mdc:browser-tools-server/modules/shared.ts)
  - Semantic API index/search: [semantic-index.ts](mdc:browser-tools-server/modules/semantic-index.ts)
  - Global logger: [logger.ts](mdc:browser-tools-server/modules/logger.ts)
- Chrome extension (DevTools panel, WS bridge, project config):
  - Panel logic: [panel.js](mdc:chrome-extension/panel.js)
  - Projects config: [projects.json](mdc:chrome-extension/projects.json)

### Active project resolution (multi-project support)
- The active project can differ across IDE instances:
  - MCP side: `ACTIVE_PROJECT` env in Cursor MCP config.
  - Server side (search API docs): Implicit per-request project via header `X-ACTIVE-PROJECT` (sent by MCP). Fallbacks to server `ACTIVE_PROJECT` or `defaultProject` in [projects.json](mdc:chrome-extension/projects.json).
- Each project has its own embedding index folder in `.vectra/<project>` and its own cached Swagger.

### API documentation search (semantic)
- Endpoint: `POST /api/embed/search` (server)
- Flow: `mcp-server.ts` → calls server with headers → [semantic-index.ts](mdc:browser-tools-server/modules/semantic-index.ts)
- Index is built per-project with Vectra. Minimal result fields (method, path, light req/resp hints). See [semantic-index.ts](mdc:browser-tools-server/modules/semantic-index.ts).
- Reindex/status endpoints (used by DevTools panel):
  - `GET /api/embed/status?project=<name>`
  - `POST /api/embed/reindex` with `{ project }`

### Tools (high level)
- `searchApiDocumentation`, `listApiTags`, `fetchLiveApiResponse`, `captureBrowserScreenshot`, `inspect*` tools live in [mcp-server.ts](mdc:browser-tools-mcp/mcp-server.ts). See detailed rule “Tools Behavior and Business Logic”.

### Logging and observability
- Global colorized logging installed at server startup in [browser-connector.ts](mdc:browser-tools-server/browser-connector.ts) via [logger.ts](mdc:browser-tools-server/modules/logger.ts).
- Set `LOG_LEVEL` to `error|warn|info|debug` to reduce noise.
- Search logs include per-query embedding timing.

### Environment variables (common)
- Project selection: `ACTIVE_PROJECT`
- Server discovery (MCP → server): `BROWSER_TOOLS_HOST`, `BROWSER_TOOLS_PORT`
- Embeddings: `OPENAI_API_KEY` or `GEMINI_API_KEY` (+ optional model vars)
- Live API: `API_BASE_URL`, `API_AUTH_TOKEN`
- Logging: `LOG_LEVEL`

### Running
- Server: `node start-server.js` (loads `dotenv` in server). Or `cd browser-tools-server && pnpm start`.
- Chrome extension: load the `chrome-extension` folder as an unpacked extension in Chrome.
- MCP: configure in Cursor’s MCP settings pointing to `browser-tools-mcp/dist/mcp-server.js` with per-IDE `ACTIVE_PROJECT`.

### Cross-project isolation
- Preferred: One shared server; per-request header `X-ACTIVE-PROJECT` keeps project selection correct per IDE instance.
- Alternative: Run two servers on different ports and set `BROWSER_TOOLS_PORT` per IDE.

### Debugging checklist
- Wrong project docs? Check request header `X-ACTIVE-PROJECT`, server `ACTIVE_PROJECT`, and `defaultProject`.
- Index missing? Open DevTools panel → Reindex for the project.
- Model mismatch warning? Reindex for current embedding provider/model.
- 429 on embed? The server will back off; retry or switch provider/model.

